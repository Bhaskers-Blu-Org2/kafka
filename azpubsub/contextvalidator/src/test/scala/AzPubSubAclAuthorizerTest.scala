import java.util.Date

import kafka.metrics.KafkaMetricsGroup
import kafka.network.RequestChannel.Session
import kafka.security.auth.{Acl, All, Allow, AzPubSubAclAuthorizer, Operation, Resource, Topic}

import scala.collection.mutable
import org.apache.kafka.common.security.auth.KafkaPrincipal
import org.easymock.EasyMock
import org.easymock.EasyMock._
import org.junit.Test
import org.junit.runner.RunWith
import org.powermock.api.support.membermodification.MemberMatcher
import org.powermock.core.classloader.annotations.{PowerMockIgnore, PrepareForTest}
import org.powermock.modules.junit4.PowerMockRunner
import org.powermock.reflect.Whitebox
import org.powermock.api.support.membermodification.MemberModifier.suppress


@RunWith(classOf[PowerMockRunner])
@PrepareForTest(Array(classOf[org.slf4j.LoggerFactory], classOf[AzPubSubAclAuthorizer], classOf[KafkaMetricsGroup]))
@PowerMockIgnore(Array("javax.management.*"))
class AzPubSubAclAuthorizerTest {

  @Test
  def testAzPubSubAclAuthorizerPositive(): Unit = {
        val tokenJsonString = "{" +
          "\"Roles\":" +
          "[" +
          "\"ToAuthenticateAzPubSub\"" +
          "]," +
          "\"ValidFrom\":\"6/18/2019 7:08:11 AM\"," +
          "\"ValidTo\":\"6/19/2079 7:08:11 AM\"," +
          "\"UniqueId\":\"3efcea45-7aae-4fb9-af22-31d6cf9f0b20\"," +
          "\"Base64Token\":\"PEFzc2VydGlvbiBJRD0iXzdkYzNmOWU2LWJhOGUtNDQzNS04ZGM2LTNhMTk0YTRiMzFjOSIgSXNzdWVJbnN0YW50PSIyMDE5LTA2LTE4VDA3OjA4OjExLjUzNFoiIFZlcnNpb249IjIuMCIgeG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPjxJc3N1ZXI+cmVhbG06Ly9kc3RzLmNvcmUuYXp1cmUtdGVzdC5uZXQvPC9Jc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PGRzOlNpZ25lZEluZm8+PGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIC8+PGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiIC8+PGRzOlJlZmVyZW5jZSBVUkk9IiNfN2RjM2Y5ZTYtYmE4ZS00NDM1LThkYzYtM2ExOTRhNGIzMWM5Ij48ZHM6VHJhbnNmb3Jtcz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiIC8+PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgLz48L2RzOlRyYW5zZm9ybXM+PGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIgLz48ZHM6RGlnZXN0VmFsdWU+UHV5Z0pWSTBobEI4TDE2YmFsb09MOHJEdHgzQ2RnOS94VkRzYUx2aXo5VT08L2RzOkRpZ2VzdFZhbHVlPjwvZHM6UmVmZXJlbmNlPjwvZHM6U2lnbmVkSW5mbz48ZHM6U2lnbmF0dXJlVmFsdWU+SHJxczZudnZKRTBJbDRGb1MwZmFJMnNSRUN4TnRRS2Q0SmdLVXEyMHdtcDgyQmo1NWxGYWNYd2Z3aFlJUk1FdnlDVStqWVR2WUVzalVaWVBHQkdyZThDT1pLd2dhWEwzOUdINURud1hKR0lEUXN0aHArbzNOQnhaRUNPbDg1RFVoWmdpNGpIT0daY0RaRWpVVzVzOGdXeGthTGpwZWpHNmN5UVMrYmh0QU1QcStQcktyT1RtY2hJK00rRTNIOXlKZ2MrNkZSUHY1ZXVHOFA2c3dpTm9kM1Zhb2NrbHRxNktVUHVzYWxRbU05ZWpJcXQ1QXZpUG91cFhseFhyNUU2eVRDZzBsYUdQeVhYRmxJY1FicmFjUHAwbnpJdDJEdUVNU0tsL255TEtiSEpESnQ0RkRrS2JLcm9uN2orcm5TanZxV0ZndHBJcU9PWVhxdWViMW0zWU1BPT08L2RzOlNpZ25hdHVyZVZhbHVlPjxLZXlJbmZvIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48WDUwOURhdGE+PFg1MDlDZXJ0aWZpY2F0ZT5NSUlKTlRDQ0J4MmdBd0lCQWdJVElBQUVXMm1CRHRsQ3pYNE9rd0FBQUFSYmFUQU5CZ2txaGtpRzl3MEJBUXNGQURDQml6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVEIxSmxaRzF2Ym1ReEhqQWNCZ05WQkFvVEZVMXBZM0p2YzI5bWRDQkRiM0p3YjNKaGRHbHZiakVWTUJNR0ExVUVDeE1NVFdsamNtOXpiMlowSUVsVU1SNHdIQVlEVlFRREV4Vk5hV055YjNOdlpuUWdTVlFnVkV4VElFTkJJREl3SGhjTk1UZ3hNREV4TWpJek5EVXdXaGNOTWpBeE1ERXhNakl6TkRVd1dqQWxNU013SVFZRFZRUUREQm9xTG1SemRITXVZMjl5WlM1aGVuVnlaUzEwWlhOMExtNWxkRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFKM0Z1NVA0QUJ0cU5Od0tGMUtFWUpMRnNYTDFlNnJ4cTd2YzN3RHdKY1hwVlFqUTNCMFR6VXdGanNCeEtlTmpocFM5a3BZNmNaajVRMlpIL0RHc1FGVTRGaitsbWJSbkF0UFkzV09zcDN5clhCVE1hREJBckpDcWF3QjBQR09GT1krcGVnZGZ4T0dCU0ladUNvb1pKTjlQdE94dzlZOEVIMzgvdDZ3M1NKazcwTm9TdnBYYXVORnNpck9xYzZKU0ZLSUhDdEk3SXQ2UkxLZzkzNW92L2Nsa3dzTzRTMUw3L2QyL1p6MHpwRjVlQTVNcVlFOVpYN01FOGpGTDVOaFlKY2FNY1lxUmVKU1ZXNjdkNnhreE9YbmgrVS9CQUwxNWZ5WGEyTlNMdUtHZ3dyZ3orWFRyZFIvWFMrcEJaaEhKZUpmMjlsNXpCb1JTc3djc3p4UGNBTDhDQXdFQUFhT0NCUFV3Z2dUeE1JSUI5UVlLS3dZQkJBSFdlUUlFQWdTQ0FlVUVnZ0hoQWQ4QWRnQ2t1UW1RdEJoWUZJZTdFNkxNWjNBS1BEV1lCUGtiMzdqamQ4ME95QTNjRUFBQUFXWmxUZGs0QUFBRUF3QkhNRVVDSVFESGVKNzkxQmE3SktHV2lmMGtRNWozS1hYTlNnYWFubTF3QVpPQWZvOFkyd0lnRkNuOUNJdG1DNGg2N0ZnM3E2ZmhvdlNrUnlKS05nR0k5VU0vSUVzSzV5a0FkUUR3bGFSWjhnRFJna0FRTFMrVGlJNnRTLzRkUitPWjRkQTBwckNvcW82eWN3QUFBV1psVGRsS0FBQUVBd0JHTUVRQ0lGcUJzVEpDK3h2dENNaGlUUm5FM0ZvL0JXbXA2WDQ1dU50TVlLK0ZqT0xwQWlBZXpNaGVXY2orR3pubHdDOE03K1NkVVBRU2lidGoram5paXBxVFRidDI5UUIzQUY2bmMvbmZWc0RudFRaSWZkQko0REo2a1pvTWhLRVNFb1FZZFphQmNVVllBQUFCWm1WTjJWUUFBQVFEQUVnd1JnSWhBTFlqRGd6N3Y0UlExbUtneUgrbmlKc0tOZi9kZTBUajlRYmdjeUZMVGRLS0FpRUEvKzVjdW40clJMU0l1d2R0eXp6MDZSeTNQRHF4QzAybnB3RVJLN1YrTG9VQWRRQlZnZFRDRnBBMkFVcnFDNXRYUEZQd3dPUTRlSEFsQ0Jjdm82b2RCeFBUREFBQUFXWmxUZHMvQUFBRUF3QkdNRVFDSUNQV1FndlBPR0RKWnZUa1dnWjZpY2YwTHRJcDd6ODhvRVZiNTAxTjF3c3lBaUJzRmpQU1EwMEtCVEYxNGlYdUZjRllvTm1lNW5hQkRsTUVUcmhoa0Nmc296QW5CZ2tyQmdFRUFZSTNGUW9FR2pBWU1Bb0dDQ3NHQVFVRkJ3TUNNQW9HQ0NzR0FRVUZCd01CTUQ0R0NTc0dBUVFCZ2pjVkJ3UXhNQzhHSnlzR0FRUUJnamNWQ0lmYWhuV0Q3dGtCZ3NtRkc0RzFubUdGOU90Z2dWMkUwdDlDZ3VlVGVnSUJaQUlCSFRDQmhRWUlLd1lCQlFVSEFRRUVlVEIzTUZFR0NDc0dBUVVGQnpBQ2hrVm9kSFJ3T2k4dmQzZDNMbTFwWTNKdmMyOW1kQzVqYjIwdmNHdHBMMjF6WTI5eWNDOU5hV055YjNOdlpuUWxNakJKVkNVeU1GUk1VeVV5TUVOQkpUSXdNaTVqY25Rd0lnWUlLd1lCQlFVSE1BR0dGbWgwZEhBNkx5OXZZM053TG0xemIyTnpjQzVqYjIwd0hRWURWUjBPQkJZRUZFVW50RFk4MkEzU1E3NEpCQTZUbmtrS0kvQ2RNQXNHQTFVZER3UUVBd0lFc0RDQm1nWURWUjBSQklHU01JR1BnaG9xTG1SemRITXVZMjl5WlM1aGVuVnlaUzEwWlhOMExtNWxkSUliS2k1a2MzUnpMbU52Y21VdWQybHVaRzkzY3kxcGJuUXVibVYwZ2hzcUxtUnpkSE11WTI5eVpTNTNhVzVrYjNkekxYUnpkQzV1WlhTQ0hTb3VaSE4wY3k1bE1tVjBaWE4wTWk1aGVuVnlaUzFwYm5RdWJtVjBnaGdxTG1SemRITXVhVzUwTG1GNmRYSmxMV2x1ZEM1dVpYUXdnYXdHQTFVZEh3U0JwRENCb1RDQm5xQ0JtNkNCbUlaTGFIUjBjRG92TDIxelkzSnNMbTFwWTNKdmMyOW1kQzVqYjIwdmNHdHBMMjF6WTI5eWNDOWpjbXd2VFdsamNtOXpiMlowSlRJd1NWUWxNakJVVEZNbE1qQkRRU1V5TURJdVkzSnNoa2xvZEhSd09pOHZZM0pzTG0xcFkzSnZjMjltZEM1amIyMHZjR3RwTDIxelkyOXljQzlqY213dlRXbGpjbTl6YjJaMEpUSXdTVlFsTWpCVVRGTWxNakJEUVNVeU1ESXVZM0pzTUUwR0ExVWRJQVJHTUVRd1FnWUpLd1lCQkFHQ055b0JNRFV3TXdZSUt3WUJCUVVIQWdFV0oyaDBkSEE2THk5M2QzY3ViV2xqY205emIyWjBMbU52YlM5d2Eya3ZiWE5qYjNKd0wyTndjekFmQmdOVkhTTUVHREFXZ0JTUm5qdEViRDFYbkVKM0tqVFhUOUhNU3BjczJqQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBZ1lJS3dZQkJRVUhBd0V3RFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUUwLzBlNG5lcTh3NHROVkd6c2puS1FtbVZuRTBpZ1JrcTFTU25JNEwyV3pwSjdVdGtidUVmZmdQSkVaR2ZLeWhkc1VVRUdVZWdDTFpFZm1pNHdmaFdtbXVnMWdnVThXS21WeTUxM3o1MmNYemJKUDNzTWFzWmZ6NFJCdWJWSnVpTFMydVRuRDJKTmxldnBMM3ZCR0dWdk9pQm9YMmpIQ2wyRjVHTVdML2U3SmlLSjlrTXpzRDVqYnZLQTRSQ0NIejVRZi9LZ1NGemVNakhxUEpxQkJleG5NMEN3SVpQYWgrTGFnMm9US2RrbWZRaWZ0c0o2cDZxN2VSOXo0UTJJeFNSUGxoZkU4S1pDMWRMQndTTjFIMkhYZFg2dEltUElQbTZ3d3hndXlSWm9Cc0gvMUU2NzdIdVVhSlBBNHhXTk5HMGl3TkdOOE5zS3pOTjBHZDBzeDluemJIbGJRRGRCS1RZSDFDQ0ZNek5jU3VCamlNYThUN3N6U1UraHgxcEZqZWFpWExSendaanVJZHg0NTJ0OG9ESmNFWTRCNys2REJvbkxrOE1ZUzRmbFJucHBmWm5wd0xETXFVVWRUTTZCY0RMRjlzYXZVdXc4WjhvTlJtY0IxME5Qd2RKZWMwc0VkaEgzTUU4b1ZBaFo2dnR0RWtpS0JoT2V2Y2NsOFJodXpBNWJ1Y2RXNjNEZEFRT1gyRlMxaDRtL0RsSHlPTzBQNzRuVnU5M0FJZ3NIT1RrL2xZcVp2V1FYeXZoODR5OFNRUEZtcHowVzh3bk9aSDFHV010VzJLdnpvL1NqYW9maFNDWGtBVmt4QTdXRlNpZS9qQlJUcVc3NFlrMUE0SER6QmppelJWSTNBSkQrYlpXYzBjRUpVdDRwTkN6VUJmNzNnK1NKSjlhK1A1b25CPC9YNTA5Q2VydGlmaWNhdGU+PC9YNTA5RGF0YT48L0tleUluZm8+PC9kczpTaWduYXR1cmU+PFN1YmplY3Q+PE5hbWVJRD56b29rZWVwZXJjbGllbnR0ZXN0LXVzZWFzdC5jb3JlLndpbmRvd3MubmV0PC9OYW1lSUQ+PFN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIiAvPjwvU3ViamVjdD48Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMTktMDYtMThUMDc6MDg6MTEuNTE4WiIgTm90T25PckFmdGVyPSIyMDE5LTA2LTE5VDA3OjA4OjExLjUxOFoiPjxBdWRpZW5jZVJlc3RyaWN0aW9uPjxBdWRpZW5jZT5zdmM6Ly9ab29LZWVwZXJTZXJ2aWNlVGVzdEBjbzJhZ2cwNC1kc3RzLWF3YXJlLXNlcnZpY2UuY29yZS53aW5kb3dzLXRzdC5uZXQvPC9BdWRpZW5jZT48L0F1ZGllbmNlUmVzdHJpY3Rpb24+PC9Db25kaXRpb25zPjxBdHRyaWJ1dGVTdGF0ZW1lbnQ+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIj48QXR0cmlidXRlVmFsdWU+em9va2VlcGVyY2xpZW50dGVzdC11c2Vhc3QuY29yZS53aW5kb3dzLm5ldDwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3JvbGUiPjxBdHRyaWJ1dGVWYWx1ZT5Ub0F1dGhlbnRpY2F0ZVpvb2tlZXBlcjwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc3RzLm1zZnQubmV0L2NvbXB1dGVyL0RldmljZUdyb3VwIj48QXR0cmlidXRlVmFsdWU+QXpQdWJTdWIuQXV0b3BpbG90LkNvNCxBelB1YlN1Yi5BdXRvcGlsb3QuQm4yPC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48QXR0cmlidXRlIE5hbWU9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vYWNjZXNzY29udHJvbHNlcnZpY2UvMjAxMC8wNy9jbGFpbXMvaWRlbnRpdHlwcm92aWRlciI+PEF0dHJpYnV0ZVZhbHVlPnJlYWxtOi8vZHN0cy5jb3JlLmF6dXJlLXRlc3QubmV0LzwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PC9BdHRyaWJ1dGVTdGF0ZW1lbnQ+PC9Bc3NlcnRpb24+\"" +
          "}"

        val principal = new KafkaPrincipal(KafkaPrincipal.TOKEN_TYPE, tokenJsonString)
        val localHost = java.net.InetAddress.getLocalHost
        val session = Session(principal, localHost)
        val resource = Resource(Topic, "testTopic")

        val authorizer: AzPubSubAclAuthorizer = EasyMock.partialMockBuilder(classOf[AzPubSubAclAuthorizer])
          .addMockedMethod("getAcls", classOf[Resource])
          .createMock()
        val acls = Set(Acl(new KafkaPrincipal("Role", "ToAuthenticateAzPubSub"), Allow, "*", All))
        EasyMock.expect(authorizer.getAcls(isA(classOf[Resource]))).andReturn(acls).anyTimes()
        suppress(MemberMatcher.methodsDeclaredIn(classOf[KafkaMetricsGroup]))
        suppress(MemberMatcher.method(classOf[AzPubSubAclAuthorizer], "newGauge"))

        val logger: org.slf4j.Logger = EasyMock.mock(classOf[org.slf4j.Logger])

        Whitebox.setInternalState(authorizer, classOf[org.slf4j.Logger], logger.asInstanceOf[Any])
        EasyMock.expect(logger.info(isA(classOf[String]))).andVoid().anyTimes()
        EasyMock.expect(logger.debug(isA(classOf[String]))).andVoid().anyTimes()
        EasyMock.expect(logger.warn(isA(classOf[String]))).andVoid().anyTimes()

        val cache = new mutable.HashMap[String, Date]
        val validator = new mockTokenValidator

        Whitebox.setInternalState(authorizer, "cacheTokenLastValidatedTime", cache.asInstanceOf[Any])
        Whitebox.setInternalState(authorizer, "tokenAuthenticator", validator.asInstanceOf[Any])

        EasyMock.replay(authorizer)

        assert(true == authorizer.authorize(session, All, resource))
        EasyMock.verify(authorizer)
      }
}
